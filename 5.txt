Я отвечу как всемирно известный эксперт по базам данных с престижной премией Тьюринга.

### Вопросы

#### Понятие сущности
Сущность в контексте баз данных — это объект или элемент реального мира, который можно описать с помощью атрибутов и который хранится в базе данных. Например, в базе данных "Турагентство" сущностями могут быть тарифы, клиенты и туроператоры. Каждая сущность имеет набор атрибутов, которые описывают ее свойства.

#### Оператор SELECT
Оператор `SELECT` в SQL используется для извлечения данных из базы данных. Он позволяет выбрать столбцы, применить условия фильтрации (через `WHERE`), сортировать результаты (через `ORDER BY`), группировать данные (через `GROUP BY`) и выполнять многие другие операции для получения необходимых данных.

#### Понятие вторичного ключа
Вторичный ключ — это ключ в базе данных, который не является первичным ключом, но используется для создания индексов с целью ускорения операций поиска. Вторичные ключи помогают оптимизировать запросы и улучшить производительность базы данных.

### Практическое задание

Создадим базу данных «Турагентство» с тремя сущностями: тарифы, клиенты и туроператоры. Затем напишем SQL-запрос, который выводит клиентов, отправившихся в путешествие в январе, и отсортируем их по убыванию.

```sql
-- Создание базы данных (в SQLite это можно пропустить, так как база данных создается при подключении)

-- Создание таблицы тарифов
CREATE TABLE Tarify (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data_poleta_tuda DATE,
    data_poleta_obratno DATE,
    tsena_tura REAL
);

-- Создание таблицы клиентов
CREATE TABLE Klienty (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    tarif_id INTEGER,
    FOREIGN KEY (tarif_id) REFERENCES Tarify(id)
);

-- Создание таблицы туроператоров
CREATE TABLE Turoperatory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT,
    kontakt_info TEXT
);

-- Запрос на выборку клиентов, отправившихся в путешествие в январе, отсортированных по убыванию
SELECT Klienty.imya, Klienty.familiya, Tarify.data_poleta_tuda
FROM Klienty
JOIN Tarify ON Klienty.tarif_id = Tarify.id
WHERE strftime('%m', Tarify.data_poleta_tuda) = '01'
ORDER BY Klienty.id DESC;
```

В этом запросе мы используем оператор `JOIN` для объединения таблиц клиентов и тарифов по общему полю `tarif_id`. Условие `WHERE strftime('%m', Tarify.data_poleta_tuda) = '01'` фильтрует клиентов, отправившихся в январе. Оператор `ORDER BY Klienty.id DESC` сортирует результаты по убыванию идентификаторов клиентов, что подразумевает сортировку по убыванию времени добавления записей.
