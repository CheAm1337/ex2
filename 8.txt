I'll answer as a world-renowned database expert specializing in SQL database design and optimization.

### Вопросы

#### Виды информационных систем
Информационные системы делятся на несколько видов:
1. **Транзакционные системы** обрабатывают повседневные операции бизнеса, такие как продажи, заказы, оплаты и т.д.
2. **Управленческие информационные системы (УИС)** предназначены для поддержки принятия управленческих решений на основе анализа данных и представления отчетов.
3. **Документооборотные системы** управляют созданием, хранением и распределением документов в организации.
4. **Экспертные системы** используют знания экспертов для принятия решений в специфических областях.
5. **Операционные системы** управляют общими ресурсами компьютерной системы и обеспечивают выполнение прикладного программного обеспечения.

#### Понятие домена
Домен в базе данных — это множество допустимых значений для атрибута или столбца в таблице. Он определяет тип данных, которые могут быть введены в конкретный атрибут. Например, домен даты может ограничивать ввод только дат, а домен целого числа — только целые числа.

#### Что такое запись
Запись в контексте базы данных — это одна строка данных, которая представляет собой набор значений, хранящихся в таблице. Каждая запись соответствует одному экземпляру сущности (например, один покупатель, один товар или один сотрудник) и содержит значения атрибутов, определенных для этой таблицы.

### Практическое задание

Создадим базу данных «Книжный магазин» с тремя сущностями: покупатели, товары и сотрудники. Затем напишем SQL-запрос, который выводит данные покупателей, приобретших товары на сумму более 1500 рублей, и отсортирует их по имени покупателя.

```sql
-- Создание базы данных (в SQLite это можно пропустить, так как база данных создается при подключении)

-- Создание таблицы покупателей
CREATE TABLE Pokupateli (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    email TEXT,
    telefon TEXT
);

-- Создание таблицы товаров
CREATE TABLE Tovary (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT,
    tsena REAL
);

-- Создание таблицы сотрудников (пропустим в этом примере, так как она уже создана ранее)

-- Создание таблицы покупок, связывающей покупателей и товары
CREATE TABLE Pokupki (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pokupatel_id INTEGER,
    tovar_id INTEGER,
    kolichestvo INTEGER,
    FOREIGN KEY (pokupatel_id) REFERENCES Pokupateli(id),
    FOREIGN KEY (tovar_id) REFERENCES Tovary(id)
);

-- Запрос на выборку данных покупателей, приобретших товары на сумму более 1500 рублей, отсортированных по имени покупателя
SELECT Pokupateli.imya, Pokupateli.familiya, SUM(Tovary.tsena * Pokupki.kolichestvo) AS total_spent
FROM Pokupateli
JOIN Pokupki ON Pokupateli.id = Pokupki.pokupatel_id
JOIN Tovary ON Pokupki.tovar_id = Tovary.id
GROUP BY Pokupateli.id
HAVING total_spent > 1500
ORDER BY Pokupateli.imya;
```

Этот SQL-запрос объединяет данные из таблиц покупателей, покупок и товаров. Он вычисляет общую сумму потраченных денег каждым покупателем (используя функцию `SUM`), фильтрует результаты по покупкам на сумму более 1500 рублей (через `HAVING`) и сортирует их по имени покупателя (через `ORDER BY`).
