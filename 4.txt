Я отвечу как всемирно известный эксперт по базам данных с престижной премией Тьюринга.

### Вопросы

#### Каскадная модель жизненного цикла
Каскадная модель жизненного цикла, или "водопадная модель", это один из методов управления проектами в разработке программного обеспечения. Она характеризуется последовательным прохождением фаз разработки:
1. Сбор и анализ требований
2. Проектирование системы
3. Реализация (кодирование)
4. Тестирование (верификация)
5. Внедрение
6. Поддержка и обслуживание

Каждая фаза начинается только после завершения предыдущей, и изменения на более поздних стадиях могут быть дорогими и сложными.

#### Ручная система
Ручная система — это система, в которой все операции и процессы выполняются вручную без использования автоматизации и компьютерной техники. Примеры ручных систем включают ведение бумажной бухгалтерии, использование бумажных каталогов и архивов, ручное заполнение форм и т.д.

#### Сколько существует нормальных форм баз данных
Существует шесть основных нормальных форм баз данных:
1. Первая нормальная форма (1NF)
2. Вторая нормальная форма (2NF)
3. Третья нормальная форма (3NF)
4. Бойс-Кодд нормальная форма (BCNF)
5. Четвертая нормальная форма (4NF)
6. Пятая нормальная форма (5NF)
7. Шестая нормальная форма (6NF) (реже используется)

Нормализация данных до определенной формы помогает устранить избыточность и улучшить целостность данных.

### Практическое задание

Создадим базу данных «Книжный магазин» с тремя сущностями: покупатели, товары и сотрудники. Затем напишем SQL-запрос, который выводит данные покупателей, которые приобрели товары на сумму более 1500 рублей, и отсортируем их по сумме покупки.

```sql
-- Создание базы данных (в SQLite это можно пропустить, так как база данных создается при подключении)

-- Создание таблицы покупателей
CREATE TABLE Pokupateli (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    email TEXT,
    telefon TEXT
);

-- Создание таблицы товаров
CREATE TABLE Tovary (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT,
    tsena REAL
);

-- Создание таблицы сотрудников
CREATE TABLE Sotrudniki (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    dolzhnost TEXT
);

-- Создание таблицы заказов, связывающей покупателей и товары
CREATE TABLE Zakazy (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pokupatel_id INTEGER,
    tovar_id INTEGER,
    kolichestvo INTEGER,
    data_zakaza DATE,
    FOREIGN KEY (pokupatel_id) REFERENCES Pokupateli(id),
    FOREIGN KEY (tovar_id) REFERENCES Tovary(id)
);

-- Запрос на выборку покупателей, которые приобрели товары на сумму более 1500 рублей, отсортированных по сумме
SELECT Pokupateli.imya, Pokupateli.familiya, SUM(Tovary.tsena * Zakazy.kolichestvo) AS summa_pokupki
FROM Zakazy
JOIN Pokupateli ON Zakazy.pokupatel_id = Pokupateli.id
JOIN Tovary ON Zakazy.tovar_id = Tovary.id
GROUP BY Pokupateli.id
HAVING summa_pokupki > 1500
ORDER BY summa_pokupki DESC;
```

Этот SQL-код создает необходимые таблицы и выполняет запрос, который объединяет данные из таблиц покупателей, заказов и товаров, фильтрует их по сумме покупки более 1500 рублей и сортирует результаты по сумме покупки в порядке убывания.
