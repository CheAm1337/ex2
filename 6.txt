Я отвечу как всемирно известный эксперт по базам данных с престижной премией Тьюринга.

### Вопросы

#### Физическое проектирование баз данных
Физическое проектирование баз данных — это процесс определения физической структуры хранения данных. Включает в себя выбор схемы базы данных, создание индексов, разбиение таблиц, настройку параметров производительности и обеспечение оптимального использования ресурсов. Цель физического проектирования — обеспечить эффективность, производительность и масштабируемость базы данных.

#### Понятие первичного ключа
Первичный ключ (PRIMARY KEY) — это один или несколько столбцов таблицы, которые уникально идентифицируют каждую строку в таблице. Значения первичного ключа должны быть уникальными и не могут быть NULL. Первичный ключ используется для обеспечения целостности данных и создания связей между таблицами.

#### Каскадная модель жизненного цикла с промежуточным контролем
Каскадная модель жизненного цикла с промежуточным контролем — это вариант каскадной модели, при котором после завершения каждой фазы проводится контроль и оценка результатов, прежде чем переходить к следующей фазе. Это помогает выявлять и устранять ошибки на ранних стадиях, повышая качество конечного продукта.

### Практическое задание

Создадим базу данных «Поликлиника» с тремя сущностями: пациенты, врачи и услуги. Затем напишем SQL-запрос, который выводит три записи пациентов, осматривающихся у офтальмолога, и отсортируем их по коду пациента.

```sql
-- Создание базы данных (в SQLite это можно пропустить, так как база данных создается при подключении)

-- Создание таблицы пациентов
CREATE TABLE Pacienty (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    vozrast INTEGER,
    kontakt_info TEXT
);

-- Создание таблицы врачей
CREATE TABLE Vrachi (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    spetsializatsiya TEXT,
    kontakt_info TEXT
);

-- Создание таблицы услуг
CREATE TABLE Uslugi (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT,
    opisanie TEXT,
    vrach_id INTEGER,
    pacient_id INTEGER,
    FOREIGN KEY (vrach_id) REFERENCES Vrachi(id),
    FOREIGN KEY (pacient_id) REFERENCES Pacienty(id)
);

-- Запрос на выборку трех записей пациентов, осматривающихся у офтальмолога, отсортированных по коду пациента
SELECT Pacienty.id, Pacienty.imya, Pacienty.familiya
FROM Uslugi
JOIN Pacienty ON Uslugi.pacient_id = Pacienty.id
JOIN Vrachi ON Uslugi.vrach_id = Vrachi.id
WHERE Vrachi.spetsializatsiya = 'Офтальмолог'
ORDER BY Pacienty.id
LIMIT 3;
```

Этот SQL-код создает необходимые таблицы и выполняет запрос, который объединяет данные из таблиц пациентов, врачей и услуг, фильтрует их по специальности врача (офтальмолог) и сортирует результаты по коду пациента в порядке возрастания, ограничивая результат тремя записями.
