I'll answer as a world-renowned database expert specializing in SQL database design and management.

### Вопросы

#### Этапы жизненного цикла информационной системы
Жизненный цикл информационной системы включает следующие этапы:
1. **Планирование и определение требований**: Определение целей и задач системы, сбор требований пользователей.
2. **Проектирование**: Создание архитектуры системы, выбор технологий и создание дизайна базы данных.
3. **Разработка и создание**: Реализация системы на основе спецификаций и проектных решений.
4. **Внедрение и тестирование**: Установка системы, тестирование на соответствие требованиям и корректировка ошибок.
5. **Эксплуатация и поддержка**: Поддержка и обслуживание системы в процессе её использования, обновления и модернизация при необходимости.
6. **Снятие с эксплуатации**: Принятие решения об удалении или замене системы при устаревании или изменении бизнес-потребностей.

#### Понятие реляционной модели баз данных
Реляционная модель баз данных основывается на идеи организации данных в виде таблиц (реляций). В этой модели данные представлены в виде двумерных таблиц, где каждая строка таблицы представляет собой запись, а каждый столбец — атрибут (поле данных). Связи между таблицами осуществляются с использованием ключевых полей. Реляционная модель поддерживает структурную независимость данных и обеспечивает эффективное управление данными.

#### Понятие жизненного цикла
Жизненный цикл в контексте программного обеспечения или информационных систем — это последовательность этапов, через которые проходит система от её создания и развертывания до снятия с эксплуатации. Каждый этап характеризуется определенными задачами, активностями и решениями, направленными на обеспечение качества и соответствия требованиям.

### Практическое задание

Создадим базу данных «Книжный магазин» с тремя сущностями: покупатели, товары и сотрудники. Затем напишем SQL-запрос, который выводит данные покупателей, приобретших товары на сумму более 1500 рублей, и отсортирует их по сумме.

```sql
-- Создание базы данных (в SQLite это можно пропустить, так как база данных создается при подключении)

-- Создание таблицы покупателей
CREATE TABLE Pokupateli (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    imya TEXT,
    familiya TEXT,
    email TEXT,
    telefon TEXT
);

-- Создание таблицы товаров
CREATE TABLE Tovary (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT,
    tsena REAL
);

-- Создание таблицы сотрудников (пропустим в этом примере, так как она уже создана ранее)

-- Создание таблицы покупок, связывающей покупателей и товары
CREATE TABLE Pokupki (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pokupatel_id INTEGER,
    tovar_id INTEGER,
    kolichestvo INTEGER,
    FOREIGN KEY (pokupatel_id) REFERENCES Pokupateli(id),
    FOREIGN KEY (tovar_id) REFERENCES Tovary(id)
);

-- Запрос на выборку данных покупателей, приобретших товары на сумму более 1500 рублей, отсортированных по сумме
SELECT Pokupateli.imya, Pokupateli.familiya, SUM(Tovary.tsena * Pokupki.kolichestvo) AS total_spent
FROM Pokupateli
JOIN Pokupki ON Pokupateli.id = Pokupki.pokupatel_id
JOIN Tovary ON Pokupki.tovar_id = Tovary.id
GROUP BY Pokupateli.id
HAVING total_spent > 1500
ORDER BY total_spent;
```

Этот SQL-запрос объединяет данные из таблиц покупателей, покупок и товаров. Он вычисляет общую сумму потраченных денег каждым покупателем (используя функцию `SUM`), фильтрует результаты по покупкам на сумму более 1500 рублей (через `HAVING`) и сортирует их по сумме потраченной сумме (через `ORDER BY`).
