I'll answer as a world-renowned database expert specializing in SQL database design and management.

### Вопросы

#### Какие виды связей бывают в базе данных?
В базе данных существуют три основных типа связей между таблицами:
1. **Один к одному (1:1)**: Каждой записи в первой таблице соответствует ровно одна запись во второй таблице, и наоборот.
2. **Один ко многим (1:M)**: Каждой записи в первой таблице может соответствовать несколько записей во второй таблице, но каждой записи во второй таблице соответствует только одна запись в первой.
3. **Многие ко многим (M:N)**: Каждой записи в первой таблице может соответствовать несколько записей во второй таблице, и каждой записи во второй таблице может соответствовать несколько записей в первой. Для реализации такой связи обычно создается промежуточная таблица.

#### Понятие конфиденциальности
Конфиденциальность — это свойство информации, заключающееся в обеспечении её доступности только для тех субъектов, которые имеют на это право. Конфиденциальность данных гарантирует, что только авторизованные пользователи могут получить доступ к определенной информации.

#### Способы защиты информации
Способы защиты информации включают:
1. **Шифрование**: Преобразование данных в формат, который не может быть прочитан без ключа дешифрования.
2. **Аутентификация и авторизация**: Проверка личности пользователей и контроль их доступа к ресурсам.
3. **Резервное копирование**: Регулярное создание копий данных для восстановления в случае утраты.
4. **Межсетевые экраны и антивирусное ПО**: Защита от несанкционированного доступа и вредоносного ПО.
5. **Управление доступом**: Ограничение прав доступа пользователей к информации на основе их ролей и обязанностей.

### Практическое задание

Создадим базу данных «Школа» с пятью сущностями: ученики, дисциплины, учителя, родители учеников и классы. Затем напишем SQL-запрос, который объединяет фамилию, имя и отчество учеников и выводит в поле «ФИО».

```sql
-- Создание базы данных (в SQLite это можно пропустить, так как база данных создается при подключении)

-- Создание таблицы учеников
CREATE TABLE Ucheniki (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    familiya TEXT,
    imya TEXT,
    otchestvo TEXT,
    vozrast INTEGER,
    klass_id INTEGER,
    FOREIGN KEY (klass_id) REFERENCES Klassy(id)
);

-- Создание таблицы дисциплин с фиксированным списком
CREATE TABLE Discipliny (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT
);

-- Создание таблицы учителей
CREATE TABLE Uchitelya (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    familiya TEXT,
    imya TEXT,
    otchestvo TEXT,
    predmet_id INTEGER,
    FOREIGN KEY (predmet_id) REFERENCES Discipliny(id)
);

-- Создание таблицы родителей учеников
CREATE TABLE Roditeli (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    familiya TEXT,
    imya TEXT,
    otchestvo TEXT,
    telefon TEXT,
    email TEXT,
    uchenik_id INTEGER,
    FOREIGN KEY (uchenik_id) REFERENCES Ucheniki(id)
);

-- Создание таблицы классов
CREATE TABLE Klassy (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nazvanie TEXT,
    uchitel_id INTEGER,
    FOREIGN KEY (uchitel_id) REFERENCES Uchitelya(id)
);

-- Запрос на объединение фамилии, имени и отчества учеников в поле «ФИО»
SELECT id, familiya || ' ' || imya || ' ' || otchestvo AS FIO, vozrast, klass_id
FROM Ucheniki;
```

Этот SQL-запрос выбирает данные из таблицы учеников, объединяет фамилию, имя и отчество в одно поле «ФИО» (используя оператор `||` для конкатенации строк в SQLite) и выводит результат.
